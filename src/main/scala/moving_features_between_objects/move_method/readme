Move Method(搬移函数)
在该函数最常用的类中建立一个有着类似行为的新函数。
将旧函数变成一个单纯的委托函数或者将旧函数完全移除

动机：
如果一个类有太多行为，或者一个类与另一个类有太多合作而形成高度耦合，就需要Move Method
经常浏览类中的所有函数，从中寻找这样的函数：
使用另一个对象的次数比使用自己所驻对象的次数还多。一旦移动了一些字段，就应该做这种检查。
根据“这个函数与哪些对象的交流比较多”，决定需要移动的方法的移动路径。
 
做法：
1、检查源类中被源函数所使用的一切特性（包括字段和函数），考虑它们是否也该被搬移。
=> 如果某个特性只被你打算搬移的那个函数用到，就应该将它一并搬移。
   如果另有其他函数使用了这个特性，可以考虑将其他使用该特性的函数也一并搬移。
2、检查源类的子类和超类，看看是否有该函数的其他声明
=> 如果出现其他声明，你或许无法进行搬移，除非目标类也表现出多态性。
3、在目标类中声明这个函数。
=> 你可以为此函数选择一个新的名称--对目标类更有意义的名称。
4、将源函数的代码复制到目标函数中。调用后者，使其能在新家中正常运行。
=> 如果目标函数中使用了源类中的特性，你得决定如何从目标函数引用源对象。
   如果目标类中没有相应的引用机制，就把源对象的引用当做参数，传给新建的目标函数。
=> 如果源函数包含异常处理，你得判断逻辑上应该由哪个类来处理这一异常。如果应该由源类来负责，就把异常处理留在原地。
5、编译目标类
6、决定如何从源函数正确引用目标对象。
=> 可能会有一个现成的字段或者函数帮你取得目标对象。如果没有，就看能否轻松建立一个这样的函数。
   如果还是不行，就得在源类中新建一个字段来保存目标对象。
7、修改源函数，使之成为一个纯委托函数
8、编译，测试
9、决定是否删除源函数，或者将它作为一个委托函数保存下来。
=> 如果你经常要在源对象中引用目标函数，那么将源函数作为目标函数保存下来会比较简答。
10、如果要移除源函数，请将源类中对源函数的所有调用，替换为对目标函数的调用。
11、编译，测试
