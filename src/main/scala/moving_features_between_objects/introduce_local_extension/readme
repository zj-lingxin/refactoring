Introduce Local Extension(引入本地扩展)
你需要为服务类提供一些额外函数，但你无法修改这个类
建立一个新类，使它包含这些函数。让这个扩展品成为源类的子类或包装类

动机
类的作者无法预知未来，它们常常没能为你预先准备一些有用的函数。如果你可以
修改源码，最好的办法是直接加入自己需要的函数。但你经常无法修改源码。如果只
需要一两个函数，你可以使用Introduce Foreign Method。但如果你需要的函数超过
两个，外加函数就难以控制它们了。所有你需要将这些函数组织在一起，放到一个恰当
地方去。要达到这一目的，两种标准对象技术--子类化和包装类。我把子类和包装类统称为
本地扩展(local extension)
所谓“本地扩展”是一个独立的类，但也是被扩展类的子类型：它提供源类的一切特性，同时
额外添加新特性。在任何使用源类的地方，你都可以使用本地扩展取而代之。
使用本地扩展使得以坚持“函数和数据应该被统一封装”的原则。如果你一直把本该放在扩展类
中的代码零散地放置于其他类中，最终只会让其他这些类变得复杂，并使得其中代码难以被复用。
在子类和包装类之间做选择时，我通常首选子类，因为这样的工作量比较少。制作子类的最大障碍
在于，它必须在对象创建期实施。

做法
1、建立一个扩展类，将它作为原始类的子类或包装类
2、在扩展类中加入转型构造函数
=> 所谓“转型构造函数”是指“接收原对象作为参数”的构造函数。如果采用子类化方案，那么转型
构造函数应该调用适当的超类构造函数；如果采用包装类方案，那么转型构造函数应该将它得到的传入
参数以实例变量的形式保存起来，用作接收委托的原对象。
3、在扩展类中加入新特性
4、根据需要，将原对象替换为扩展对象
5、将针对原始类定义的所有外加函数搬移到扩展类中。

