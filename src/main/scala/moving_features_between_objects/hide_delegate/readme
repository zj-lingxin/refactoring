Hide Delegate(隐藏“委托关系”)
客户通过委托类来调用另一个对象。
在服务类上建立客户所需的所有函数，用以隐藏委托关系

动机：
“封装”意味着每个对象都应该尽可能少了解系统的其他部分。
如此一来，一旦发生变化，需要了解这一变化的对象就会比较少--这会使变化比较容易进行。
众所周知，Java允许将字段声明为public，但你还是应该隐藏对象的字段。随着经验日渐丰富，
你会发现，有更多可以而且值得封装的东西。

如果某个客户先通过服务对象的字段得到另一个对象，然后调用后者的函数，那么客户就必须知晓
这一层委托关系。万一委托关系发生变化，客户也得相应变化。你可以在服务对象上放置一个简单
的委托函数，将委托关系隐藏起来，从而去除这种依赖。这么一来，即便发生委托关系的变化，变化
也将被限制在服务对象中，不会波及客户。一旦你对所有客户都隐藏了委托关系，就不需要在服务对象
的接口中公开委托对象了。

做法：
1、对于每一个委托关系中的函数，在服务对象端建立一个简单的委托函数。
2、调整客户，令它只调用服务对象提供的函数
3、每次调整后，编译测试
4、如果将来不再有任何客户需要取用Delegate(受拖类),便可移除服务对象中的相关访问函数。

范例：
本例从两个类开始：代表人“人”的Person和代表部门的“Department”。
如果客户需要知道某人的经理是谁，他必须先取得Department对象。
这样的编码就对客户揭露了Department的工作原理。
于是客户知道：Department用于追踪“经理”这条信息。
如果对客户隐藏Department，可以减少耦合。
为了这一目的，可以在Person中建立一个简单的委托关系。